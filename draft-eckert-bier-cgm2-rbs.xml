<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-bier-cgm2-rbs-01" category="exp">

  <front>
    <title abbrev="bier-cgm2-rbs">Carrier Grade Minimalist Multicast (CGM2) using Bit Index Explicit Replication (BIER) with Recursive BitString Structure (RBS) Addresses</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>

    <date year="2021" month="November" day="11"/>

    
    <workgroup>BIER</workgroup>
    

    <abstract>


<t>This memo introduces the architecture of a multicast
architecture derived from BIER-TE, which this memo calls
Carrier Grade Minimalist Multicast (CGM2). It reduces
limitations and complexities of BIER-TE by replacing
the representation of the in-packet-header delivery tree
of packets through a “flat” BitString of adjacencies
with a hierarchical structure of BFR-local BitStrings 
called the Recursive BitString Structure (RBS) Address.</t>

<t>Benefits of CGM2 with RBS addresses include smaller/fewer BIFT in BFR,
less complexity for the network architect and in the CGM2
controller (compared to a BIER-TE controller) and fewer packet
copies to reach a larger set of BFER.</t>

<t>The additional cost of forwarding with RBS addresses is
a slightly more complex processing of the RBS address
in BFR compared to a flat BitString and the novel per-hop rewrite of
the RBS address as opposed to bit-reset rewrite in BIER/BIER-TE.</t>

<t>CGM2 can support the traditional deployment model of BIER/BIER-TE
with the BIER/BIER-TE domain terminating at service provider
PE routers as BFIR/BFER, but it is also the intention of this document to
expand CGM2 domains all the way into hosts, and therefore
eliminating the need for an IP Multicast flow overlay,
further reducing the complexity of Multicast services using
CGM2. Note that this is not fully detailed in this version
of the document.</t>

<t>This document does not specify an encapsulation for CGM2/RBS
addresses. It could use existing encapsulations such as <xref target="RFC8296"/>,
but also other encapsulations such as IPv6 extension headers.</t>



    </abstract>


  </front>

  <middle>


<section anchor="overview" title="Overview">

<section anchor="introduction" title="Introduction">

<t>Carrier Grade Minimalist Multicast (CGM2) is an architecture
derived from the BIER-TE architecture <xref target="I-D.ietf-bier-te-arch"/> with the following
changes/improvements.</t>

<t>CGM2 forwarding is based on the principles of BIER-TE forwarding:
It is based on an explicit, in-packet, “source routed” tree indicated
through bits for each adjacency that the packet has to
traverse. Like in BIER-TE, adjacencies can be L2 to a subnet
local neighbor in support of “native” deployment of CGM2
and/or L3, so-called “routed” adjacencies to support
incremental or partial deployment of CGM2 as needed.</t>

<t>The address used to replicate packets in the network is
not a flat network wide BitString as in BIER-TE, but a
hierarchical structure of BitStrings called a Recursive BitString Structure (RBS)
Address. The significance of the BitPositions (BP)
in each BitString is only local to the BIFT of the router/BFR
that is processing this specific BitString.</t>

<t>RBS addressing allows for a more compact representation of
a large set of adjacencies especially in the common case
of sparse set of receivers in large Service Provider Networks (SP).</t>

<t>CGM2 thereby eliminates the challenges in BIER <xref target="RFC8279"/> and BIER-TE having to
send multiple copies of the same packet in large SP
networks and the complexities especially for BIER-TE
(but also BIER) to engineer multiple set identifier (SI) and/or
sub-domains (SD) BIER-TE topologies for limited size BitStrings
(e.g.: 265) to cover large network topologies.</t>

<t>Like BIER-TE, CGM2 is intended to leverage a Controller
to minimize the control plane complexity in the network to
only a simple unicast routing underlay required only for
routed adjacencies.</t>

<t>The controller centric architecture
provides most easily any type of required traffic optimization
for its multicast traffic due to their need to perform
often NP-complete calculations across the whole topology:
reservation of bandwidth to support CIR/PIR traffic buffer/latency
to support Deterministic Network (DetNet) traffic, cost optimized
Steiner trees, failure point disjoint trees for higher resilience including
DetNet deterministic services.</t>

<t>CGM2 can be deployed as BIER/BIER-TE are specified today,
by encapsulating IP Multicast traffic at Provider Edge (PE)
routers, but it is also considered to be highly desirable
to extend CGM2 all the way into Multicast Sender/Receivers
to eliminate the overhead of an Overlay Control plane for
that (legacy) IP Multicast layer and the need to deal with
yet another IP multicast group addressing space. In this deployment option
Controller signaling extends directly (or indirectly via BFIR) into
senders.</t>

</section>
<section anchor="encapsulation-considerations" title="Encapsulation Considerations">

<t>This document does not define a specific BIER-RBS encapsulation
nor does it preclude that multiple different encapsulations
may be beneficial to better support different use-cases
or operator/user technology preferences. Instead, it discusses
considerations for specific choices.</t>

<t>BIER-RBS can easily re-use <xref target="RFC8296"/> encapsulation. The
RBS address is inserted into the <xref target="RFC8296"/>  BitString
field. The BFR forwarding plane needs to be configured 
(from Controller or control plane) that the BIFT-id(s) used
with RBS addresses are mapped to BIFT and forwarding
rules with RBS semantic.</t>

<t>SI/SD fields of <xref target="RFC8296"/> may be used as in BIER-TE,
but given that CGM2 is designed (as described in the Overview
section) to simplify multicast services, a likely and
desirable configuration would be to only use a single 
BIFT in each BFR for RBS addresses, and mapping these to
a single SD and SI 0.</t>

<t>IP Multicast <xref target="RFC1112"/> was defined as an extension
of IP <xref target="RFC791"/>, reusing the same network header, and
IPv6 multicast inherits the same approach. In comparison,
<xref target="RFC8296"/> defines BIER encapsulation as a
completely separate (from IP) layer 3 protocol,
and duplicates both IP and MPLS header elements into the
<xref target="RFC8296"/> header. This not only results in always
unused, duplicate header parameters (such as TC vs. DSCP), but
it also foregoes the option to use any non-considered
IPv6 extension headers with BIER and would require the
introduction of a whole new BIER specific socket API
into host operating systems if it was to be supported 
natively in hosts.</t>

<t>Therefore an encapsulation of RBS addresses using an
IP and/or IPv6 extension header may be more desirable
in otherwise IP and/or IPv6 only deployments, for example
when CGM2 is extended into hosts, because it would allow
to support CGM2 via existing IP/IPv6 socket APIs as long as
they support extension headers, which the most important
host stacks do today.</t>

</section>
</section>
<section anchor="cgm2rbs-architecture" title="CGM2/RBS Architecture">

<t>This section describes the basic CGM2 architecture
via <xref target="FIG-ARCH"/> through its key differences over the BIER-TE
architecture.</t>

<figure title="CGM2/RBS Architecture" anchor="FIG-ARCH"><artwork><![CDATA[
                    Optional
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

       CGM2      [CGM2  Controller] 
control plane   .  ^      ^     ^   
               .  /       |      \     BIFT configuration
     ..........  |        |       |    per-flow RBS setup
    .            |        |       |   
   .             v        v       v
Src (-> ... ) -> BFIR-----BFR-----BFER -> (... ->) Rcvr

                |<----------------->|
          CGM2 with RBS-address forwarding plane

 |<.............. <- CGM domain ---> ...............|

              |<--------------------->|
              Routing underlay (optional)
]]></artwork></figure>

<t>In the “traditional” option, when deployed with a domain
spanning from BFIR to BFER, the CGM2 architecture is very
much like the BIER-TE architecture, in which the BIER-TE forwarding rules
for (BitString,SI,SD) addresses are replaced by the
RBS address forwarding rules.</t>

<t>The CGM2 Controller replaces the BIER-TE controller,
populating during network configuration the BIFT,
which are very much like BIER-TE BIFT, except that
they do not cover a network-wide BP address space, but
instead each BFR BIFT only needs as many BP in its BIFT
as it has link-local adjacencies, and in partial deployments
also additional L3 adjacencies to tunnel across non-CGM
capable routers.</t>

<t>Per-flow operations in this “traditional” option is very much as in
BIER/BIER-TE, with the CGM2 controller determining the
RBS address (instead of the BIER-TE (BitString,SI,SD)) to be
imposed as part of the RBS address header (compared
to the BIER encapsulation <xref target="RFC8296"/>) on the BFIR.</t>

<t>To eliminate the need for an IP Multicast flow overlays,
a CGM2 domain may extend all the way into Sender/Receiver
hosts. This is called “end-to-end” deployment model.
In that case, the sender host and CGM2 controller
collaborate to determine the desired receivers for
a packet as well as desired path policy/requirements,
the controller indicates to the sender of the packet
the necessary RBS address and address of the BFIR,
and the Sender imposes an appropriate RBS address header
together with a unicast encapsulation towards the BFIR.</t>

<t>CGM2 is also intended so especially simplify
controller operations that also instantiate QoS policies
for multicast traffic flows, such as bandwidth and
latency reservations (e.g.: DetNet). As in BIER-TE, this
is orthogonal to the operations of the CGM2/RBS address
forwarding operations and will be covered in separate documents.</t>

</section>
<section anchor="cgm2rbs-forwarding-plane" title="CGM2/RBS forwarding plane">

<t>Instead of a (flat) BitString as in BIER-TE
that use a network wide shared BP address space for
adjacencies across multiple BFR, CGM2 uses a structured
address built from so-called RecursiveUnits (RU) that contain BitStrings,
each of which is to be parsed by exactly one BFR along the delivery
tree of the packet.</t>

<t>The equivalent to a BIER/BIER-TE BitString is
therefore called the RecursiveUnit BitString Structure (RBS) Address.
Forwarding for CGMP2 is therefore also called RBS forwarding.</t>

<section anchor="rbs-bift" title="RBS BIFT">

<t>RBS BIFT as shown in <xref target="FIG-RBS-BIFT"/> are, like BIER-TE BIFT, tables that are indexed by
BP, containing for each BP an adjacency.  The core difference over BIER-TE
BIFT is that the BP of the BIFT are all local to the BFR,
whereas in BIER-TE, the BP are shared across a BIER-TE domain,
each BFR can only use a subset the BP for its own adjacencies,
and only in some cases can BP be shared for adjacencies across
two (or more) BFR.  Because of this difference, most of the complexities
of BIER-TE BIFT are not required with BIER-RBS BIFT, see <xref target="complexities"/>.</t>

<figure title="RBS BIFT" anchor="FIG-RBS-BIFT"><artwork><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|adjacenct BFR|
+--+---------+-------------+
| 2|        0|    punt/host|
+--+---------+-------------+
|     .....    ...         |
+--+---------+-------------+
| N|      ...|         ... |
+--+---------+-------------+
]]></artwork></figure>

<t>An RBS BIFT has a configured number of N addressable BP entries.
When a BFR receives a packet with an RBS address,
it expects that the BitString inside the RBS address that
needs to be parsed by the BFR (see <xref target="RBS-address"/> has a length that matches N
according to the encapsulation used for the RBS address.
Therefore, N MUST support configuration in increments of the supported size
of the BitString in the encapsulation of the RBS Address.
In the reference encoding (see <xref target="RBS-address"/>), the increment for N is 1 (bit).
If an encapsulation would call for a byte accurate encoding of the
BitString, N would have to be configurable in increments of 8.</t>

<t>BFR MUST support a value of N larger than the maximum number of adjacencies
through which RBS forwarding/replication of a single packet is required,
such as the number of physical interfaces on BFR that are intended to be
deployed as a Provider Core (P) routers.</t>

<t>RBS BIFT introduce a new “Recursive” flag for each BP. These
are used for adjacencies to other BFR to indicate that the
BFR processing the packet RBS address BitString also has to
expect for every BP with the recursive flag set another
RU inside the RBS address.</t>

</section>
<section anchor="encoding" title="Reference encoding of RBS addresses">

<t>Structure elements of the RBS Address and its components
are parameterized according to a specific encapsulation
for RBS addresses, such as the total size of the TotalLen
field and the unit in which it is counted (see <xref target="RBS-address"/>).
These parameters are outside the scope of this document. Instead,
this document defines example parameters that together form the 
so called “Reference encoding of RBS addresses”. This encoding 
may or may not be adopted for any particular encapsulation
of RBS addresses.</t>

</section>
<section anchor="RBS-address" title="RBS Address">

<t>An RBS address is structured as shown in <xref target="FIG-RBS"/>.</t>

<figure title="RBS Address" anchor="FIG-RBS"><artwork><![CDATA[
+----------+-----+---------------+---------+
| TotalLen | Rsv | RecursiveUnit | Padding |
+----------+-----+---------------+---------+
           .                     .
            .... TotalLen .......
]]></artwork></figure>

<t>TotalLen counts in some unit, such as bits, nibbles or
bytes the length of the RBS Address excluding
itself and Padding. For the reference encoding, TotalLen
is an 8-bit field that counts the size of the RBS address
in bits, permitting for up to 256 bit long RBS addresses.</t>

<t>In case additional, non-recursive flags/fields are determined
to be required in the RBS Address, they should be encoded
in a field between TotalLen and RecursiveUnit, which is
called Rsv. In the reference encoding, this field has a length
of 0.</t>

<t>Padding is used to align the RBS address as required
by the encapsulation. In the reference encoding, this alignment
is to 8 bits (byte boundaries).
Therefore, Padding (bits) = (8 - TotalLen % 8).</t>

<section anchor="recursiveunit" title="RecursiveUnit">

<t>The RecursiveUnit field is structured as shown in <xref target="FIG-RBS-RU"/>.</t>

<figure title="RBS RecursiveUnit" anchor="FIG-RBS-RU"><artwork><![CDATA[
+-+-+-+-+-+  -+-+-+-+-+-+-+-+-+  -+-+-+-+-+-+-+-+     -+
| BitString...| AddressingField...| RecursiveUnit 1...M|
+-+-+-+-+-+  -+-+-+-+-+-+-+-+-+  -+-+-+-+-+-+-+-+-    -+
]]></artwork></figure>

<t>The BitString field indicates the bit positions (BPs) 
to which the packet is to be replicated using the
BIFT of the BFR that is processing the Recursive unit.</t>

<t>For each of M BP set in the BitString of the RecursiveUnit for
which the Recursive flag is set in the BIFT of the BFR, the
RecursiveUnit contains a RecursiveUnit i, i=1…M, in order of increasing BP index.</t>

<t>If adjacencies between BFR are not configured as recursive in the BIFT,
this recursive extraction does not happen for an adjacency, no
RecursiveUnit i has to be encoded for the BP,
and BFRs across such adjacencies would have to share the
BP of a common BIFT as in BIER-TE. This option is not further
discussed in this version of the document.</t>

</section>
<section anchor="addressingfield" title="AddressingField">

<t>The AddressingField of an RBS address is structured as shown in
<xref target="FIG-RBS-AF"/>.</t>

<figure title="RBS AddressingField" anchor="FIG-RBS-AF"><artwork><![CDATA[
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+
|      L1       |     L2        |...|      L(M-1)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t>The AddressingField consists of one or more fields Li,
i=1…(M-1).  Li is the length of RecursiveUnit i for the
i’th recursive bit set in the BitString preceding it.</t>

<t>In the reference encoding, the lengths are
8-bit fields indicating the length of RecursiveUnits in bits.</t>

<t>The length of the M’th RecursiveUnit is not explicitly
encoded but has to be calculated from TotalLen.</t>

</section>
</section>
</section>
<section anchor="bier-rbs-example" title="BIER-RBS Example">

<t><xref target="FIG-E-TOPO"/> shows an example for RBS forwarding.</t>

<figure title="Example Network Topology" anchor="FIG-E-TOPO"><artwork><![CDATA[
               +-+     +-+      +-+
               | |-----| |------|C|-=> Client2
               +-+     +-+      +-+
              /   \      \   /=>/ \
             /     \      \ /     |
            +-+    +-+    +-+    +-+    
 Client1 =>-|B|-=>-|R|-=>-|S|-=>-|D|-=> Client3
            +-+    +-+    +-+    +-+
                      \         /
                       \     +-+
                        \-=>-|E|-=> Client4
                             +-+
]]></artwork></figure>

<t>A packet from Client1 connected to BFIR B is intended to be
replicated to Client2,3,4. The example initially assumes
the traditional option of the architecture, in which the imposition of the 
header for the RBS address happens on BFIR B, for example
based on functions of an IP multicast flow overlay.</t>

<t>A controller determines that the packet should be forwarded
hop-by-hop across the network as shown in <xref target="FIG-E-TREE"/>.</t>

<figure title="Desired example forwarding tree" anchor="FIG-E-TREE"><artwork><![CDATA[
Client 1 ->B(impose BIER-RBS)
            =>R(
               => E (dispose BIER-RBS)
                    => Client4
               => S(
                   =>C (dispose BIER-RBS)
                       => Client2
                   =>D (dispose BIER-RBS)
                       => Client3
                    )
               )
]]></artwork></figure>

<section anchor="bfr-b" title="BFR B">

<t>The 34 bit long (without padding) RBS address shown in <xref target="FIG-E-B"/>
is constructed to represent the desired tree from <xref target="FIG-E-TREE"/> and is
imposed at B onto the packet through an appropriate header supporting the
reference encoding of RBS addresses.</t>

<figure title="RBS Address imposed at BFIR-B" anchor="FIG-E-B"><artwork><![CDATA[
         .............. RecursiveUnit .................
        .                                              .
+-------+----+-----+-----+-----+----+-----+------+-----+-----+
|Tlen:34|B:01|R:011|L1:10|S:011|L1:3|C:001|D:0001|E:001|Pad:6|
+-------+----+-----+-----+-----+----+-----+------+-----+-----+
  8bit   2bit  3bit 8bit  3bit  8bit 3bit  4bit   3bit  6bit
]]></artwork></figure>

<t>In <xref target="FIG-E-B"/> and further the illustrations of RBS addresses, BitStrings are
preceded by the name of the BFR for whom they are destined
and their values are shown as binary with the lowest BP 1
starting on the left. TotalLength (Tlen:),
AddressingField (L1:) and Padding (Pad:) fields are shown
with decimal values.</t>

<t>RBS forwarding on B examines this address based 
on its RBS BIFT with N=2 BP entries, which is shown in
<xref target="FIG-E-B-BIFT"/>.</t>

<figure title="BIER-RBS BIFT on B" anchor="FIG-E-B-BIFT"><artwork><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        0| client1 |
+--+---------+---------+
| 2|        1|       R |
+--+---------+---------+
]]></artwork></figure>

<t>This results in the parsing of the RBS address as shown in
<xref target="FIG-E-B2"/>, which shows that B does not need (nor can)
parse all structural elements, but only those relevant
to its own RBS forwarding procedure.</t>

<figure title="RBS Address as processed by BFIR-B" anchor="FIG-E-B2"><artwork><![CDATA[
         ......... RecursiveUnit ...............
        .                                       .
        .     ......,.. RecursiveUnit 1 .........
        .    .                                  .
+-------+----+----------------------------------+-----+
|Tlen:34|B:01|R:01100001010011000000110010001001|Pad:6|
+-------+----+----------------------------------+-----+
  8bit   2bit  32bit                             6bit
]]></artwork></figure>

<t>There is only one BP towards BFR R set in the BitString B:01,
so the RecursiveUnit 1 follows directly after the end
of the BitString B:01 and it covers the whole Tlen - length
of BitString (34 - 2 = 32 bit).</t>

<t>B rewrites the RBS address by replacing the RecursiveUnit with RecursiveUnit 1
and adjusts the Padding to zero bits. The resulting RBS address
is shown in <xref target="FIG-E-R"/>. It then sends
the packet copy with that rewritten RBS address to BFR R.</t>

</section>
<section anchor="bfr-r" title="BFR R">

<t>BFR R receives from BFR B the packet with that RBS address
shown in <xref target="FIG-E-R"/>.</t>

<figure title="RBS Address processed by BFR-R" anchor="FIG-E-R"><artwork><![CDATA[
         .............. RecursiveUnit ............
        .                                         .
+-------+-----+-----+-----+----+-----+------+-----+
|Tlen:32|R:011|L1:18|S:011|L1:3|C:001|D:0001|E:001|
+-------+-----+-----+-----+----+-----+------+-----+
  8bit    3bit  8bit  3bit 8bit 3bit  4bit   3bit    
                    .                       .     .
                     . RecursiveUnit 1...... .....
                                               .
                            RecursiveUnit 2 ...
]]></artwork></figure>

<t>BFR R parses the RBS Address as shown in <xref target="FIG-E-R2"/> using its
RBS BIFT of N=3 BP entries shown in <xref target="FIG-E-R-BIFT"/>.</t>

<figure title="RBS Address processed by BFR-R" anchor="FIG-E-R2"><artwork><![CDATA[
         .............. RecursiveUnit ............
        .                                         .
+-------+-----+-----+--------------------+-----+
|Tlen:32|R:011|L1:18|S:011000000110010001|E:001|
+-------+-----+-----+--------------------+-----+
  8bit    3bit  8bit  18bit               3bit    
                    .                    .     .
                     . RecursiveUnit 1... .....
                                            .
                         RecursiveUnit 2 ...
]]></artwork></figure>

<t>Because there are two recursive BP set in the BitString for R,
one for BFR S and one for BFR E, one Length field L1 is required in
the AddressingField, indicating the length of the
RecursiveUnit 1 for BFR S, followed by the remainder of
the RBS address being the RecursiveUnit 2 for BFR E.</t>

<figure title="RBS BIFT on BFR R" anchor="FIG-E-R-BIFT"><artwork><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        1|       B |
+--+---------+---------+
| 2|        1|       S |
+--+---------+---------+
| 3|        1|       E |
+--+---------+---------+
]]></artwork></figure>

<t>BFR R accordingly creates one copy for BFR S using
RecursiveUnit 1, and only copy for BFR E using
RecursiveUnit 2, updating Padding accordingly for each
copy.</t>

</section>
<section anchor="bfr-s" title="BFR S">

<t>BFR S receives from BFR B the packet and parses the
RBS address as shown in <xref target="FIG-E-S"/> using its RBS BIFT
of N=3 BP shown in <xref target="FIG-E-S-BIFT"/>.</t>

<figure title="RBS Address processed by BFR-S" anchor="FIG-E-S"><artwork><![CDATA[
         .... RecursiveUnit ....
        .                       .
+-------+-----+----+-----+------+-----+
|Tlen:18|S:011|L1:3|C:001|D:0001|Pad:6|
+-------+-----+----+-----+------+-----+
  8bit    3bit 8bit  3bit   4bit  3bit 
                   .    . .      .
                    ....   ......
     RecursiveUnit 1 .      .
                            .
     RecursiveUnit 2 .......
]]></artwork></figure>

<figure title="RBS BIFT on BFR-S" anchor="FIG-E-S-BIFT"><artwork><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        1|       R |
+--+---------+---------+
| 2|        1|       C |
+--+---------+---------+
| 3|        1|       D |
+--+---------+---------+
]]></artwork></figure>

<t>BFR S accordingly sends one packet copy with RecursiveUnit 1
in the RBS address to BFR C and a second packet copy with
RecursiveUnit 2 to BFR D.</t>

</section>
<section anchor="bfr-c" title="BFR C">

<t>BFR C receives from BFR S the packet and parses the
RBS address according to its N=3 BP entries BIFT (shown in
<xref target="FIG-E-C-BIFT"/>) as shown in <xref target="FIG-E-C"/>.</t>

<figure title="RBS Address processed by BFR-C" anchor="FIG-E-C"><artwork><![CDATA[
+-------+-----+-----+
|Tlen:3 |C:001|Pad:5|
+-------+-----+-----+
  8bit    3bit 5bi
]]></artwork></figure>

<figure title="RBS BIFT on BFR-C" anchor="FIG-E-C-BIFT"><artwork><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           S |
+--+---------+-------------+
| 2|        1|           D |
+--+---------+-------------+
| 3|        0|  local_decap|
+--+---------+-------------+
]]></artwork></figure>

<t>BFR S accordingly creates one packet copy for BP 3
where the RBS address encapsulation is disposed of,
and the packet is ultimately forwarded to Client 2,
for example because of an IP multicast payload
for which the multicast flow overlay identifies
Client 2 as an interested receiver, as in BIER/BIER-TE.</t>

<t>To avoid having to use an IP flow overlay, the BIFT
could instead have one BP allocated for every non-RBS
destination, in this example BP 3 would then explicitly
be allocated for Client 2, and instead of disposing
of the RBS address encapsulation, BFR C would
impose or rewrite a unicast encapsulation to make the packet
become a unicast packet directed to Client 2. This option
is not further detailed in this version of the document.</t>

</section>
<section anchor="bfr-d" title="BFR D">

<t>The procedures for processing of the packet on BFR D
are very much the same as on BFR C.  <xref target="FIG-E-D"/> shows
the RBS address at BFR D, <xref target="FIG-E-D-BIFT"/> shows
the N=4 bit RBS BIFT of BFR D.</t>

<figure title="RBS Address processed by BFR-D" anchor="FIG-E-D"><artwork><![CDATA[
+-------+------+-----+
|Tlen:4 |D:0001|Pad:4|
+-------+------+-----+
  8bit    4bit   4bit
]]></artwork></figure>

<figure title="RBS BIFT on BFR-D" anchor="FIG-E-D-BIFT"><artwork><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           S |
+--+---------+-------------+
| 2|        1|           C |
+--+---------+-------------+
| 3|        1|           E |
+--+---------+-------------+
| 4|        0|  local_decap|
+--+---------+-------------+
]]></artwork></figure>

</section>
<section anchor="bfr-e" title="BFR E">

<t>The procedures for processing of the packet on BFR E
are very much the same as on BFR C and D.  <xref target="FIG-E-E"/> shows
the RBS address at BFR D, <xref target="FIG-E-E-BIFT"/> shows
the N=E bit RBS BIFT of BFR E.</t>

<figure title="RBS Address processed by BFR-E" anchor="FIG-E-E"><artwork><![CDATA[
+-------+-----+-----+
|Tlen:3 |E:001|Pad:5|
+-------+-----+-----+
  8bit    3bit   5bit
]]></artwork></figure>

<figure title="RBS BIFT on BFR-E" anchor="FIG-E-E-BIFT"><artwork><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           R |
+--+---------+-------------+
| 2|        1|           D |
+--+---------+-------------+
| 3|        0|  local_decap|
+--+---------+-------------+
]]></artwork></figure>

</section>
</section>
<section anchor="rbs-forwarding-pseudocode" title="RBS forwarding Pseudocode">

<t>The following example RBS forwarding Pseudocode assumes
the reference encoding of bit-accurate length of BitStrings
and RecursiveUnits as well as 8-bit long TotalLen and AddressingField
Lengths. All packet field addressing and address/offset calculations
is therefore bit-accurate instead of byte accurate (which is what most
CPU memory access today is).</t>

<figure title="RBS address forwarding Pseudocode" anchor="FIG-PSEUDOCODE"><artwork><![CDATA[
void ForwardRBSPacket (Packet)
{
  RBS = GetPacketMulticastAddr(Packet); 
  Total_len = RBS;
  Rsv = Total_len + length(Total_Len);
  BitStringA = Rsv + length(Rsv);
  AddressingField =  BitStringA + BIFT.entries;

  // [1] calculate number of recursive bits set in BitString
  CopyBitString(*BitStringA, *RecursiveBits, BIFT.entries);
  And(*RecursiveBits,*BIFTRecursiveBits, BIFT.entries);
  N = CountBits(*RecursiveBits, BIFT.entries);

  // Start of first RecursiveUnit in RBS address
  // After AddressingField array with 8-bit length fields
  RecursiveUnit = AddressingField + (N - 1) * 8;

  RemainLength = *Total_len - length(Rsv)
                 - BIFT.entries;

  Index = GetFirstBitPosition(*BitStringA);
  while (Index) {
    PacketCopy = Copy(Packet);

    if (BIFT.BP[Index].recursive) {
      if(N == 1) {
        RecursiveUnitLength = RemainLength;
      } else {
        RecursiveUnitLength = *AddressingField;
        N--;
        AddressingField += 8;
        RemainLength -= RecursiveUnitLength;
        RemainLength -= 8; // 8 bit of AddressingField
      }
      RewriteRBS(PacketCopy, RecursiveUnit, RecursiveUnitLength);
      SendTo(PacketCopy, BIFT.BP[Index].adjacency);

      RecursiveUnit += RecursiveUnitLength;
    } else {
      DisposeRBSheader(PacketCopy);
      SendTo(PacketCopy, BIFT.BP[Index].adjacency);
    }
    Index = GetNextBitPosition(*BitStringA, Index);
  }
]]></artwork></figure>

<t>Explanations for <xref target="FIG-PSEUDOCODE"/>.</t>

<t>RBS is the (bit accurate) address of the RBS address in packet
header memory.  BitStringA is the address of the RBS address
BitString in memory.  length(Total_Len) and length(Rsv) are the bit length of the two RBS 
address fields, e.g.: 8 bit and 0 bit for the reference encoding.</t>

<t>The BFR local BIFT has a total number of BIFT.entries
addressable BP 1…BIFTentries. The BitString therefore
has BIFT.entries bits.</t>

<t>BIFT.RecursiveBits is a BitString pre-filled by the control
plane with all the BP with the recursive flag set. This is constructed
from the Recursive flag setting of the BP of the BIFT. The
code starting at [1] therefore counts the number of
recursive BP in the packets BitString.</t>

<t>Because the AddressingField does not have an entry for the
last (or only) RecursiveUnit, its length has to be calculated
by taking TotalLen into account.</t>

<t>RewriteRBS needs to replace RBS address with the
RecursiveUnit address, keeping only Rsv, recalculating
TotalLen and adding appropriate Padding.</t>

<t>For non-recursive BP, the Pseudocode assumes disposition of the
RBSheader. This is not strictly necessary but non-disposing
cases are outside of scope of this version of the document.</t>

</section>
<section anchor="operational-and-design-considerations-informational" title="Operational and design considerations (informational)">

<section anchor="comparison" title="Comparison with  BIER-TE / BIER">

<t>This section discusses informationally, how and where 
CGM2 can avoid different complexities of BIER/BIER-TE,
and where it introduces new complexities.</t>

<section anchor="eliminating-the-need-for-large-bift" title="Eliminating the need for large BIFT">

<t>In a BIER domain with M BFER, every BFR requires M
BIFT entries. If the supported BSL is N and M &gt; 2 ^ N,
then S = (M / 2 ^ N) set indices (SI) are required,
and S copies of the packet have to be sent by the BFIR
to reach all targeted BFER.</t>

<t>In CGM2, the number of BIFT entries does not need
to scale with the number of BFER or paths through
the network, but can be limited to only the number
of L2 adjacencies of the BFR. Therefore CGM2 requires
minimum state maintenance on each BFR, and multiple
SI are not required.</t>

</section>
<section anchor="reducing-number-of-duplicate-packet-copies-across-bfr" title="Reducing number of duplicate packet copies across BFR">

<t>If the total size of an RBS encoded delivery tree is
larger than a supported maximum RBS header size, then
the CGM2 controller simply needs to divide the tree
into multiple subtrees, each only addressing a part
of the BFER (leaves) of the target tree and pruning
any unnecessary branches.</t>

<figure title="Simple Topology Example" anchor="FIG-SMPLT"><artwork><![CDATA[
             B1
            /  \
      B2    B3
        /   \  /  \
       /     \/    \
     B4      B5     B6
   /..|     /  \    |..\
B7..B99  B100..B200 B201...B300
]]></artwork></figure>

<t>Consider the simple topology in <xref target="FIG-SMPLT"/> and a multicast packet
that needs to reach all BFER B7…B300. Assume that
the desired maximum RBM header size is such that a
RBS address size of &lt;= 256 bits is desired. The CGM2
controller could create an RBS address
B1=&gt;B2=&gt;B4=&gt;(B7..B99), for a first packet, an
RBS address B1=&gt;B3=&gt;B5=&gt;(B100..B200) for a second
packet and a third RBS address B1=&gt;B3=&gt;B6=&gt;B201…B300.</t>

<t>The elimination of larger BIFT state in BFR
through multiple SI in BIER/BIER-TE does come at
the expense of replicating initial hops of a tree
in RBS addresses, such as in the example the encoding
of B1=&gt;B3 in the example.</t>

<t>Consider that the assignment of BFIR-ids with BIER
in the above example is not carefully engineered. It is
then easily possible that the BFR-ids for B7..B99 are not
sequentially, but split over a larger BFIR-id space.
If the same is true for all BFER, then it is possible
that each of the three BFR B4,B5 and B6 has attached
BFER from three different SI and one may need to send
for example three multiple packets to B7 to
address all BFER B7..B99 or to B5 to address all
B100..B200 or B6 to address all B201…B300. These
unnecessary duplicate packets across B4, B5 or B6 are
because of the addressing principle in BIER and are not
necessary in CGM2, as long as the total length of an RBS
address does not require it.</t>

<t>For more analysis, see <xref target="analysis"/>.</t>

</section>
<section anchor="complexities" title="BIER-TE forwarding plane complexities">

<t>BIER-TE introduces  forwarding plane complexities to allow
reducing the BSL required. While all of these
could be supported / implemented with CGM2, this
document contends that they are not necessary, therefore
providing significant overall simplifications.</t>

<t><list style="symbols">
  <t>BIER-TE supports multiple adjacencies in a single BIFT Index
to allow compressing multiple adjacencies into a single Index
for traffic that is known to always require replications
to all those adjacencies (such as when flooding TV traffic).</t>
  <t>BIER-TE support ECMP adjacencies which
have to calculate which out of 2 or more possible adjacencies
a packet should be forwarded to.</t>
  <t>BIER-TE supports special Do-Not-Clear (DNC) behavior of
adjacencies to permit reuse of such a bit for adjacencies
on multiple consecutive BFR. This behavior specifically
also raises the risk of looping packets.</t>
</list></t>

</section>
<section anchor="bier-te-controller-complexities" title="BIER-TE controller complexities">

<t>BIER-TE introduces BIER-TE controller plane mechanisms
that allow to reuse bits of the flat BIER-TE BitStrings
across multiple BFR solely to reduce the number of BP
required but without introducing additional complexities
for the BIER-TE forwarding plane.</t>

<t><list style="symbols">
  <t>Shared BP for all Leaf BFR.</t>
  <t>Shared BP for both Interfaces of p2p links.</t>
  <t>Shared bits for multi-access subnets (LANs).</t>
</list></t>

<t>These bit-sharing mechanisms are unnecessary
and inapplicable to CGM2 because there is no need to
share BP across the BIFT of multiple BFR.</t>

</section>
<section anchor="bier-te-specification-complexities" title="BIER-TE specification complexities">

<t>The BIER-TE specification distinguishes between forward (link scope)
and routed (underlay routed) adjacencies to highlight, explain
and emphasize on the ability of BIER-TE to be deployed in an overlay fashion
especially also to reduce the necessary BSL, even
when all routers in the domain could or do support BIER-TE.</t>

<t>In CGM2, routed adjacencies are considered to be only
required in partial deployments to forward across non-CGM2
enabled routers. This specification does therefore not
highlight link scope vs. routed adjacencies as core
distinct features.</t>

</section>
<section anchor="forwarding-plane-complexity" title="Forwarding plane complexity">

<t>CGM2 introduces some more processing calculation steps to extract
the BitString that needs to be examined by a BFR from
the RBS address. These additional steps are considered
to be non-problematic for todays programmable
forwarding planes such as P4.</t>

<t>Whereas BIER-TE clears bit on each hops processing,
CGM2 rewrites the address on every hop by extracting the recursive
unit for the next hop and make it become the packet copies
address. This rewrite shortens the RBS address. This hopefully
has only the same complexity as (tunnel) encapsulations/decapsulations
in existing forwarding planes.</t>

</section>
</section>
<section anchor="cgm2-rbs-controller-considerations" title="CGM2 / RBS controller considerations">

<t>TBD. Any aspects not covered in <xref target="comparison"/>.</t>

</section>
<section anchor="analysis" title="Analysis of performance gain with CGM2">

<t>TBD: Comparison of number of packets/header sizes required
in large real-world operator topology between BIER/BIER-TE and CGM2.</t>

</section>
<section anchor="example-use-case-scenarios" title="Example use case scenarios">

<t>TBD.</t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>This work is based on the design published by Sheng Jiang, Xu Bing, Yan Shen, Meng Rui, Wan Junjie and Wang Chuang {jiangsheng|bing.xu|yanshen|mengrui|wanjunjie2|wangchuang}@huawei.com, see <xref target="CGM2Design"/>.</t>

</section>
<section anchor="security-considerations" title="Security considerations">

<t>TBD.</t>

</section>
<section anchor="changelog" title="Changelog">

<t>[RFC-Editor: please remove this section].</t>

<t>This document is written in https://github.com/cabo/kramdown-rfc2629 markup language.
This documents source is maintained at https://github.com/toerless/bier-cgm2-rbs,
please provide feedback to the appropriate IETF mailing list and submit an Issue
to the GitHub.</t>

<t>00 - Initial version from <xref target="CGM2Design"/>.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC791' target='https://www.rfc-editor.org/info/rfc791'>
<front>
<title>Internet Protocol</title>
<author fullname='J. Postel' initials='J.' surname='Postel'><organization/></author>
<date month='September' year='1981'/>
</front>
<seriesInfo name='STD' value='5'/>
<seriesInfo name='RFC' value='791'/>
<seriesInfo name='DOI' value='10.17487/RFC0791'/>
</reference>



<reference anchor='RFC1112' target='https://www.rfc-editor.org/info/rfc1112'>
<front>
<title>Host extensions for IP multicasting</title>
<author fullname='S.E. Deering' initials='S.E.' surname='Deering'><organization/></author>
<date month='August' year='1989'/>
<abstract><t>This memo specifies the extensions required of a host implementation of the Internet Protocol (IP) to support multicasting.  Recommended procedure for IP multicasting in the Internet.  This RFC obsoletes RFCs 998 and 1054.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='5'/>
<seriesInfo name='RFC' value='1112'/>
<seriesInfo name='DOI' value='10.17487/RFC1112'/>
</reference>



<reference anchor='RFC8279' target='https://www.rfc-editor.org/info/rfc8279'>
<front>
<title>Multicast Using Bit Index Explicit Replication (BIER)</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='T. Przygienda' initials='T.' surname='Przygienda'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<date month='November' year='2017'/>
<abstract><t>This document specifies a new architecture for the forwarding of multicast data packets.  It provides optimal forwarding of multicast packets through a &quot;multicast domain&quot;.  However, it does not require a protocol for explicitly building multicast distribution trees, nor does it require intermediate nodes to maintain any per-flow state. This architecture is known as &quot;Bit Index Explicit Replication&quot; (BIER).  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The procedures for forwarding a packet based on its BIER header are specified in this document.  Elimination of the per-flow state and the explicit tree-building protocols results in a considerable simplification.</t></abstract>
</front>
<seriesInfo name='RFC' value='8279'/>
<seriesInfo name='DOI' value='10.17487/RFC8279'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>


<reference anchor='I-D.ietf-bier-te-arch'>
   <front>
      <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Gregory Cauchie'>
	 <organization>Bouygues Telecom</organization>
      </author>
      <author fullname='Michael Menth'>
	 <organization>University of Tuebingen</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This memo describes per-packet stateless strict and loose path
   steered replication and forwarding for Bit Index Explicit Replication
   packets (RFC8279).  It is called BIER Tree Engineering (BIER-TE) and
   is intended to be used as the path steering mechanism for Traffic
   Engineering with BIER.

   BIER-TE introduces a new semantic for bit positions (BP) that
   indicate adjacencies, as opposed to BIER in which BPs indicate Bit-
   Forwarding Egress Routers (BFER).  BIER-TE can leverage BIER
   forwarding engines with little changes.  Co-existence of BIER and
   BIER-TE forwarding in the same domain is possible, for example by
   using separate BIER sub-domains (SDs).  Except for the optional
   routed adjacencies, BIER-TE does not require a BIER routing underlay,
   and can therefore operate without depending on an Interior Gateway
   Routing protocol (IGP).

   As it operates on the same per-packet stateless forwarding
   principles, BIER-TE can also be a good fit to support multicast path
   steering in Segment Routing (SR) networks.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-bier-te-arch-10'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-bier-te-arch-10.txt' type='TXT'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CGM2Design" target="https://github.com/BingXu1112/CGMM/blob/main/Novel%20Multicast%20Protocol%20Proposal%20Introduction.pptx">
  <front>
    <title>Novel Multicast Protocol Proposal Introduction</title>
    <author initials="S." surname="Jiang" fullname="Sheng Jiang">
      <organization></organization>
    </author>
    <author initials="B.(." surname="Xu" fullname="Bing (Robin) Xu">
      <organization></organization>
    </author>
    <author initials="Y." surname="Shen" fullname="Yan Shen">
      <organization></organization>
    </author>
    <author initials="M." surname="Rui" fullname="Meng Rui">
      <organization></organization>
    </author>
    <author initials="W." surname="Junjie" fullname="Wan Junjie">
      <organization></organization>
    </author>
    <author initials="W." surname="Chuang" fullname="Wang Chuang">
      <organization></organization>
    </author>
    <date year="2021" month="October" day="10"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

